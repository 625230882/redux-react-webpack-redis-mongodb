/**
 * Module dependencies
 */

'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DropZone = require('./DropZone');

var _DropZone2 = _interopRequireDefault(_DropZone);

var _componentFilePicker = require('component-file-picker');

var _componentFilePicker2 = _interopRequireDefault(_componentFilePicker);

var _componentFile = require('component-file');

var _componentFile2 = _interopRequireDefault(_componentFile);

var _uid = require('uid');

var _uid2 = _interopRequireDefault(_uid);

var _lodashFindindex = require('lodash.findindex');

var _lodashFindindex2 = _interopRequireDefault(_lodashFindindex);

var _lodashRemove = require('lodash.remove');

var _lodashRemove2 = _interopRequireDefault(_lodashRemove);

/**
 * Image Uploader
 */

var ImageUploader = (function (_React$Component) {
  _inherits(ImageUploader, _React$Component);

  _createClass(ImageUploader, null, [{
    key: 'propTypes',
    value: {
      initialPhotos: _react.PropTypes.array.isRequired,
      onUpload: _react.PropTypes.func.isRequired,
      maxPhotos: _react.PropTypes.number,
      accept: _react.PropTypes.string,
      onRender: _react.PropTypes.func
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      initialPhotos: [],
      maxPhotos: 100,
      accept: 'image/*',
      onError: function onError() {}
    },
    enumerable: true
  }]);

  function ImageUploader(props) {
    _classCallCheck(this, ImageUploader);

    _React$Component.call(this, props);
    var photos = props.initialPhotos.map(function (url) {
      return { url: url, uploaded: true, key: _uid2['default']() };
    });
    this.state = { photos: photos };
  }

  ImageUploader.prototype.render = function render() {
    var photos = this.state.photos;
    var maxPhotos = this.props.maxPhotos;

    var photosCount = photos.length;

    return _react2['default'].createElement(
      'div',
      { className: 'ImageUploader' },
      _react2['default'].createElement(
        'div',
        { style: { display: 'flex' } },
        photos.map(this.renderPhoto.bind(this)),
        photosCount < maxPhotos && _react2['default'].createElement(_DropZone2['default'], {
          onDrop: this.onDrop.bind(this),
          onRender: this.props.onRender,
          onUploadPrompt: this.promptFiles.bind(this) })
      )
    );
  };

  ImageUploader.prototype.addFile = function addFile(file) {
    var _this = this;

    var accept = this.props.accept;

    var image = new _componentFile2['default'](file);

    if (!image.is(accept)) {
      return this.onUploadImage(new Error('File type not supported'));
    }

    image.toDataURL(function (err, str) {
      if (err) {
        return _this.onUploadImage(err);
      }

      _this.onUploadImage(null, str, file);
    });
  };

  ImageUploader.prototype.promptFiles = function promptFiles(e) {
    var _this2 = this;

    e.preventDefault();
    _componentFilePicker2['default']({ multiple: true }, function (files) {
      for (var i = 0; i < files.length; i++) {
        _this2.addFile(files[i]);
      }
    });
  };

  ImageUploader.prototype.getIndexOfPhoto = function getIndexOfPhoto(key) {
    return _lodashFindindex2['default'](this.state.photos, { key: key });
  };

  ImageUploader.prototype.removePhoto = function removePhoto(id) {
    this.setState(function (currentState) {
      _lodashRemove2['default'](currentState.photos, { key: id });
      return currentState;
    });
  };

  ImageUploader.prototype.updatePhoto = function updatePhoto(id, state) {
    var _this3 = this;

    this.setState(function (currentState) {
      currentState.photos[_this3.getIndexOfPhoto(id)] = state;
      return currentState;
    });
  };

  ImageUploader.prototype.mergePhoto = function mergePhoto(id, state) {
    var _this4 = this;

    this.setState(function (currentState) {
      Object.assign(currentState.photos[_this4.getIndexOfPhoto(id)], state);
      return currentState;
    });
  };

  ImageUploader.prototype.addPhoto = function addPhoto(state) {
    this.setState(function (currentState) {
      currentState.photos.push(state);
      return currentState;
    });
  };

  ImageUploader.prototype.onUploadImage = function onUploadImage(error, str, file) {
    var _this5 = this;

    var onUpload = this.props.onUpload;

    var id = _uid2['default']();

    // update our initial state
    var initialState = {
      key: id,
      url: str,
      file: file,
      uploaded: false
    };

    if (this.state.photos.length >= this.props.maxPhotos) {
      return;
    }

    if (error) {
      initialState.error = error;
      this.addPhoto(initialState);
      return;
    }

    this.addPhoto(initialState);
    if (!onUpload) return;

    onUpload(file, function (err, url) {
      if (err) {
        _this5.mergePhoto(id, {
          error: err
        });
      } else {
        _this5.updatePhoto(id, {
          error: null,
          url: url,
          uploaded: true
        });
      }
    }, function (progress) {
      _this5.mergePhoto(id, { progress: progress });
    });
  };

  ImageUploader.prototype.onDrop = function onDrop(e) {
    e.preventDefault();
    var files = e.dataTransfer.files;
    for (var i = 0; i < files.length; i++) {
      this.addFile(files[i]);
    }
  };

  ImageUploader.prototype.renderPhoto = function renderPhoto(photo) {
    var _this6 = this;

    return _react2['default'].createElement(_DropZone2['default'], {
      key: photo.key,
      image: photo.url,
      error: photo.error,
      onDrop: this.onDrop.bind(this),
      onRequestRemove: function () {
        return _this6.removePhoto(photo.key);
      },
      onUploadPrompt: this.promptFiles.bind(this),
      onRender: this.props.onRender
    });
  };

  return ImageUploader;
})(_react2['default'].Component);

exports['default'] = ImageUploader;
module.exports = exports['default'];